name: Build and Push to ECR

on:
  push:
    branches:
      - master

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
      

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      api: ${{ steps.filter.outputs.api }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - name : Checkout Code
      uses: actions/checkout@v4
    - name: Detect Changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          api:
            - 'api/**'

  build_and_push:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::996731592500:role/github-action-app-prueba-cd-repo-workflow
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
          registry-type: public
  
      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: k2g9s6k1
          REPOSITORY: iic2173-api
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG ./api
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
  
  deploy-to-ec2:
    runs-on: ubuntu-latest
    if: ${{ always()}}
    needs: [build_and_push]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::996731592500:role/github-action-app-prueba-cd-repo-workflow
          aws-region: us-east-1
      
      - name: Zip Artifacts And updload to S3
        run: zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml |
             aws s3 cp deploy.zip s3://app-prueba-cd-deploy/deploy.zip
      
      - name: Create Codedeploy Deployment
        id: codedeploy-trigger-deploy
        env:
          DEPLOYMENT_APPLICATION_NAME: app-prueba-cd-codedeploy
          DEPLOYMENT_GROUP_NAME: app-prueba-cd-deployment-group
          DEPLOYMENT_BUCKET_NAME: app-prueba-cd-deploy
          S3_KEY: deploy.zip
          GITHUB_OUTPUT: $GITHUB_ENV
        run: |
          deploymentId=$( aws deploy create-deployment \
            --application-name $DEPLOYMENT_APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP_NAME \
            --s3-location bucket=$DEPLOYMENT_BUCKET_NAME,key=$S3_KEY,bundleType=zip \
            --description "Automatic deployment from github commit ${{github.sha}}" | jq -r '.deploymentId')
          echo "deploymentId=$deploymentId" >> $GITHUB_OUTPUT
      
      - name: Wait until deployment is done
        run: aws deploy wait deployment-successful --deployment-id ${{ steps.codedeploy-trigger-deploy.outputs.deploymentId }}
          
        

